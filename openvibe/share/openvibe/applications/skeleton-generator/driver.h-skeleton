#pragma once

#include "ovasIDriver.h"
#include "../ovasCHeader.h"
#include <openvibe/ov_all.h>

#include "../ovasCSettingsHelper.h"
#include "../ovasCSettingsHelperOperators.h"

namespace OpenViBE
{
	namespace AcquisitionServer
	{
		/**
		 * \class CDriver@@ClassName@@
		 * \author @@AuthorName@@ (@@CompanyName@@)
		 * \date @@Date@@
		 * \brief The CDriver@@ClassName@@ allows the acquisition server to acquire data from a @@DriverName@@ device.
		 *
		 * TODO: details
		 *
		 * \sa CConfiguration@@ClassName@@
		 */
		class CDriver@@ClassName@@ : public IDriver
		{
		public:

			CDriver@@ClassName@@(IDriverContext& ctx);
			virtual ~CDriver@@ClassName@@();
			virtual const char* getName();

			virtual bool initialize(const size_t nSamplePerSentBlock, IDriverCallback& callback);
			virtual bool uninitialize();

			virtual bool start();
			virtual bool stop();
			virtual bool loop();

			virtual bool isConfigurable();
			virtual bool configure();
			virtual const IHeader* getHeader() { return &m_header; }

			virtual bool isFlagSet(const EDriverFlag flag) const { return flag==EDriverFlag::IsUnstable; }

		protected:

			SettingsHelper m_settings;

			IDriverCallback* m_callback = nullptr;

			// Replace this generic Header with any specific header you might have written
			CHeader m_header;

			size_t m_nSamplePerSentBlock = 0;
			float* m_sample = nullptr;

		private:

			/*
			 * Insert here all specific attributes, such as USB port number or device ID.
			 * Example :
			 */
			// size_t m_connectionID = 0;
		};
	}  //namespace AcquisitionServer
}  //namespace OpenViBE


